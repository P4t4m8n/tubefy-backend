generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins", "omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Genre {
  POP
  ROCK
  JAZZ
  BLUES
  HIP_HOP
  RAP
  COUNTRY
  CLASSICAL
  FOLK
  LATIN
  METAL
  REGGAE
  SOUL
  ELECTRONIC
  DANCE
  INDIE
  ALTERNATIVE
  PUNK
  R_AND_B
  FUNK
  DISCO
  TECHNO
  HOUSE
  TRANCE
  DUBSTEP
  DRUM_AND_BASS
  AMBIENT
  CHILLOUT
  DOWNTEMPO
  REGGAETON
  SKA
  GRUNGE
  EMO
  GOTHIC
  HARDCORE
  HARDSTYLE
  INDUSTRIAL
  NEW_WAVE
  NOISE
  PSYCHEDELIC
  SYNTHPOP
  TRAP
  VAPORWAVE
  WORLD
  OTHER
}

enum FriendStatus {
  PENDING
  ACCEPTED
  BLOCKED
  REJECTED
  REMOVED
}

enum ShareStatus {
  PENDING
  ACCEPTED
}

enum PlaylistType {
  NEW_MUSIC
  DAILY_MIX
  CHILL
  WORKOUT
  PARTY
  FOCUS
  SLEEP
  TRAVEL
  KIDS
  COOKING
  WELLNESS
  STUDY
  CHILLOUT
  NEW_WAVE
  EMPTY
  LIKED_SONGS
  LOCAL_MUSIC
  OTHER
  POPLER
  CHARTS
  DECADE
}

enum ItemType {
  SONG
  PLAYLIST
}

enum NotificationType {
  FRIEND_REQUEST
  FRIEND_ACCEPTED
  FRIEND_REJECTED
  FRIEND_BLOCKED
  FRIEND_REMOVED
  FRIEND_ADD

  PLAYLIST_LIKE
  PLAYLIST_SHARE
  PLAYLIST_COMMENT
  PLAYLIST_SONG_ADD

  SONG_LIKE
  SONG_COMMENT

  GENERAL_NOTIFICATION
  GENERAL_ERROR
}

model User {
  id             String          @id @default(uuid())
  username       String          @unique
  email          String          @unique
  password       String          @map("password_hash")
  createdAt      DateTime        @default(now())
  isAdmin        Boolean         @default(false)
  imgUrl         String?
  songs          Song[]          @relation("SongAddedByUser")
  playlists      Playlist[]      @relation("PlaylistOwner")
  friends        Friend[]        @relation("friends")
  friendsRequest Friend[]        @relation("friendsRequest")
  playlistLikes  PlaylistLike[]
  songLikes      SongLike[]
  PlaylistShare  PlaylistShare[]
  notifications  Notification[]  @relation("user")
  Notification   Notification[]  @relation("fromUser")
}

model Song {
  id            String         @id @default(uuid())
  youtubeId     String         @unique
  addByUserId   String         @map("added_by_user_id")
  addedAt       DateTime       @default(now())
  name          String
  artist        String
  imgUrl        String
  duration      String
  itemType      ItemType       @default(SONG)
  addedBy       User           @relation("SongAddedByUser", fields: [addByUserId], references: [id])
  genres        String[]       @default(["OTHER"])
  playlistSongs PlaylistSong[]
  songLikes     SongLike[]
  notifications Notification[]
}

model Playlist {
  id             String          @id @default(uuid())
  name           String          @default("")
  ownerId        String          @map("owner_id")
  isPublic       Boolean         @default(false)
  imgUrl         String          @default("")
  createdAt      DateTime        @default(now())
  originCountry  String          @default("US")
  itemType       ItemType        @default(PLAYLIST)
  description    String?
  genres         String[]        @default(["OTHER"])
  types          String[]        @default(["EMPTY"])
  owner          User            @relation("PlaylistOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  playlistSongs  PlaylistSong[]
  playlistLikes  PlaylistLike[]
  playlistShares PlaylistShare[]
  notifications  Notification[]
}

model PlaylistSong {
  id         String   @id @default(uuid())
  playlistId String   @map("playlist_id")
  songId     String   @map("song_id")
  addedAt    DateTime @default(now())
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  song       Song     @relation(fields: [songId], references: [id])

  @@unique([songId, playlistId])
}

model SongLike {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  songId    String   @map("song_id")
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  song      Song     @relation(fields: [songId], references: [id])

  @@unique([userId, songId])
}

model PlaylistLike {
  id         String   @id @default(uuid())
  userId     String   @map("user_id")
  playlistId String   @map("playlist_id")
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)

  @@unique([userId, playlistId])
}

model Friend {
  id           String         @id @default(uuid())
  createdAt    DateTime       @default(now())
  status       FriendStatus   @default(PENDING)
  userId       String         @map("user_id")
  user         User           @relation("friends", fields: [userId], references: [id])
  friendId     String         @map("friend_id")
  friend       User           @relation("friendsRequest", fields: [friendId], references: [id])
  Notification Notification[]

  @@unique([userId, friendId])
}

model PlaylistShare {
  id         String      @id @default(uuid())
  playlistId String      @map("playlist_id")
  userId     String      @map("user_id")
  sharedAt   DateTime    @default(now())
  isOpen     Boolean     @default(false)
  status     ShareStatus @default(PENDING)
  playlist   Playlist    @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  user       User        @relation(fields: [userId], references: [id])

  @@unique([playlistId, userId])
}

model Notification {
  id         String           @id @default(uuid())
  type       NotificationType
  userId     String           @map("user_id")
  fromUserId String           @map("from_id")
  text       String
  playlistId String?          @map("playlist_id")
  songId     String?          @map("song_id")
  friendId   String?          @map("friend_id")
  createdAt  DateTime         @default(now())
  user       User             @relation("user", fields: [userId], references: [id])
  fromUser   User             @relation("fromUser", fields: [fromUserId], references: [id])
  playlist   Playlist?        @relation(fields: [playlistId], references: [id])
  song       Song?            @relation(fields: [songId], references: [id])
  friend     Friend?          @relation(fields: [friendId], references: [id])
}

model LocationIP {
  id          String @id @default(uuid())
  startIp     String @db.Inet
  endIp       String @db.Inet
  countryCode String
  countryName String
}
